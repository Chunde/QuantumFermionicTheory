{"kernelspec":{"display_name":"Python 2 (Ubuntu Linux)","language":"python","name":"python2-ubuntu"},"language_info":{"codemirror_mode":{"name":"ipython","version":2},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython2","version":"2.7.10"}}
{"cell_type":"code","execution_count":4,"metadata":{"collapsed":false,"trusted":true},"outputs":[],"source":"import math\nimport numpy as np\nfrom mmfutils.performance.fft import fftn, ifftn\nfrom pytimeode import interfaces, mixins, evolvers\nimport State\nfrom State import State, u"}
{"cell_type":"code","execution_count":5,"metadata":{"collapsed":false,"scrolled":true,"trusted":true},"outputs":[{"name":"stdout","output_type":"stream","text":"Populating the interactive namespace from numpy and matplotlib\n"},{"data":{"text/plain":"array([ 0.0004094])"},"execution_count":5,"metadata":{},"output_type":"execute_result"},{"data":{"image/png":"smc-blob::8bb9ba13-cb14-4171-ae4d-6431c51d5227","text/plain":"<matplotlib.figure.Figure at 0x7f15dd1a7d10>"},"metadata":{},"output_type":"display_data"}],"source":"%pylab inline --no-import-all\nfrom IPython.display import display, clear_output\ns = State(Nxyz=(128,), Lxyz=(40*u.micron,),ws = np.array([26.0, ])*u.Hz, N=1e5)\ns.plot()\ns.ws"}
{"cell_type":"code","execution_count":6,"metadata":{"collapsed":false,"trusted":true},"outputs":[{"data":{"text/plain":"1.5746097513521148e-05"},"execution_count":6,"metadata":{},"output_type":"execute_result"}],"source":"np.array([np.sqrt(8)*126.0, 126.0, 126.0])*u.Hz\nu.Hz"}
{"cell_type":"code","execution_count":7,"metadata":{"collapsed":false,"trusted":true},"outputs":[{"data":{"text/plain":"[<matplotlib.lines.Line2D at 0x7f15ca212750>]"},"execution_count":7,"metadata":{},"output_type":"execute_result"},{"data":{"image/png":"smc-blob::658452d9-b57e-45f7-a902-9bdcc8e7c804","text/plain":"<matplotlib.figure.Figure at 0x7f15ca2724d0>"},"metadata":{},"output_type":"display_data"}],"source":"def get_err(N=128, L=24*u.micron):\n   \n    s = State(Nxyz=(N,), Lxyz=(L,), N=1e5)\n    s.g = 0\n    a = np.sqrt(u.hbar/u.m/s.ws[0])\n    x = s.xyz[0]\n    psi_0 = np.exp(-(x/a)**2/2.0)\n    s[...] = psi_0\n    s.normalize()\n    dy = s.empty()\n    s.compute_dy_dt(dy=dy, subtract_mu=True)\n    return abs(dy[...]).max()\nNs = np.arange(2,128,2)\n#Ns = 2**np.arange(2,8)\nerrs = map(get_err, Ns)\nplt.semilogy(Ns, errs, '+-')"}
{"cell_type":"code","execution_count":8,"metadata":{"collapsed":false,"trusted":true},"outputs":[{"data":{"text/plain":"1.0"},"execution_count":8,"metadata":{},"output_type":"execute_result"}],"source":"u.micron"}
{"cell_type":"code","execution_count":9,"metadata":{"collapsed":false,"trusted":true},"outputs":[{"name":"stdout","output_type":"stream","text":"(6.010003337302212, 6.010003337302213)\n9.87009441159e-15\n"}],"source":"s = State(Nxyz=(46,), Lxyz=(23*u.micron,))\na = np.sqrt(u.hbar/u.m/s.ws[0])\nL, N = s.Lxyz[0], s.Nxyz[0]\nk_max = np.pi*(N-2)/L   # For Khalid...\nprint (k_max, s.kxyz[0].max())\nprint(np.exp(-(L/2/a)**2/2))   # Wavefunction drops by factor of macheps"}
{"cell_type":"code","execution_count":10,"metadata":{"collapsed":false,"scrolled":false,"trusted":true},"outputs":[{"data":{"text/plain":"[<matplotlib.lines.Line2D at 0x7f15ca190750>]"},"execution_count":10,"metadata":{},"output_type":"execute_result"},{"data":{"image/png":"smc-blob::8c021136-cf18-4a1b-b6b1-390976612e2b","text/plain":"<matplotlib.figure.Figure at 0x7f15ca285a10>"},"metadata":{},"output_type":"display_data"}],"source":"psi_0 = s.xyz[0]*np.exp(-(s.xyz[0]/a)**2/2)\nplt.semilogy(np.fft.fftshift(s.kxyz[0]), \n         np.fft.fftshift(abs(np.fft.fft(psi_0))), '-+')"}
{"cell_type":"markdown","metadata":{},"source":"I got error for this part, the error message is shown in the output, That comfuses me for a while."}
{"cell_type":"markdown","metadata":{},"source":"## Exact Solution with Interactions\nI am trying to figure out which part is the interactions term.\nThe formula in the code looks strange to me, I know there is an interacton term $gn_0$, and it's added to the homarmnic poterntial term. But it also includes a $2k$ term.\n$V_{ext} = \\frac{\\hbar^2}{2m} [4(kx)^2 - 2k) - gn_0]$ \n#### OK, I remember what we did in the meeting"}
{"cell_type":"code","execution_count":11,"metadata":{"collapsed":false,"trusted":true},"outputs":[{"name":"stdout","output_type":"stream","text":"Populating the interactive namespace from numpy and matplotlib\n"}],"source":"%pylab inline --no-import-all\nfrom IPython.display import display, clear_output\nimport States\nfrom States import State, u\ns = State(Nxyz=(64,), Lxyz=(23*u.micron,), N=1e5)\na = np.sqrt(u.hbar/u.m/s.ws[0])\nx = s.xyz[0]\npsi_0 = np.exp(-(x/a)**2/2)\n#print(x)\n#print(psi_0)\nclass State1(State):\n    def __init__(self, *v, **kw):\n        State.__init__(self, *v, **kw)\n        \n        a = np.sqrt(u.hbar/u.m/self.ws[0])\n        x = self.xyz[0]\n        \n        k = 1./2./a**2\n        \n        psi_0 = 4.0*np.exp(-(x/a)**2/2)\n        n_0 = abs(psi_0)**2\n        \n        self._V_ext = (u.hbar**2/2.0/u.m*(4*(k*x)**2 - 2*k) - self.g*n_0)\n        self.data[...] = psi_0\n        self.get_Vext = lambda: self._V_ext\n        self.pre_evolve_hook()\n    \n        \n"}
{"cell_type":"code","execution_count":12,"metadata":{"collapsed":false,"trusted":true},"outputs":[{"data":{"text/plain":"1.2001072726244708e-14"},"execution_count":12,"metadata":{},"output_type":"execute_result"},{"data":{"image/png":"smc-blob::5e8d02dc-69d8-4fc9-9828-66fef8d27bfa","text/plain":"<matplotlib.figure.Figure at 0x7f15ca080bd0>"},"metadata":{},"output_type":"display_data"}],"source":"s = State1(Nxyz=(64,), Lxyz=(23*u.micron,))\ns.plot()\nplt.plot(x, s.get_Vext())\ndy = s.empty()\ns.compute_dy_dt(dy=dy, subtract_mu=False)\nabs(dy[...]).max()"}
{"cell_type":"code","execution_count":13,"metadata":{"collapsed":false,"trusted":true},"outputs":[],"source":"#print(s.kxyz)\nK1=sum((u.hbar*_k)**2/2.0/u.m for _k in s.kxyz)\n#print(K1)\nK=(u.hbar*s.kxyz[0])**2/u.m\n#print(K)"}
{"cell_type":"code","execution_count":14,"metadata":{"collapsed":false,"scrolled":false,"trusted":true},"outputs":[{"data":{"image/png":"smc-blob::18ddf3e8-b454-4d64-ac68-b8b644b33fed","text/plain":"<matplotlib.figure.Figure at 0x7f15cfb3e2d0>"},"metadata":{},"output_type":"display_data"}],"source":"from mmfutils.contexts import NoInterrupt\nfrom pytimeode.evolvers import EvolverSplit, EvolverABM\nfrom IPython.display import display, clear_output\n\ns = State1(Nxyz=(64*4,), Lxyz=(23*u.micron,))\nassert np.allclose(s._N, s.get_N())\n\ns[...] = 1.0\ns.normalize()\ns.cooling_phase = 1j\n\nE_max = u.hbar**2*np.abs(s.kxyz).max()**2/2.0/u.m\n\n#e = EvolverSplit(s, dt=0.01*u.hbar/E_max, normalize=True)\ne = EvolverABM(s, dt=0.1*u.hbar/E_max, normalize=True)\ne.y.plot()\n"}
{"cell_type":"code","execution_count":15,"metadata":{"collapsed":false,"scrolled":false,"trusted":true},"outputs":[{"data":{"image/png":"smc-blob::91965bf0-8235-4e1a-8a16-b8b911106dae","text/plain":"<matplotlib.figure.Figure at 0x7f15ca285cd0>"},"metadata":{},"output_type":"display_data"}],"source":"e.y.t=0\nwith NoInterrupt(ignore=True) as interrupted:\n    while e.y.t < 1*u.ms and not interrupted:\n        e.evolve(100)\n        plt.clf()\n        e.y.plot()\n        display(plt.gcf())\n        clear_output(wait=True)"}
{"cell_type":"code","execution_count":16,"metadata":{"collapsed":false,"scrolled":true,"trusted":true},"outputs":[{"data":{"text/plain":"[<matplotlib.lines.Line2D at 0x7f15c9f27e90>]"},"execution_count":16,"metadata":{},"output_type":"execute_result"},{"data":{"image/png":"smc-blob::6c7b3f78-3749-4d05-87b1-ecad534b35cd","text/plain":"<matplotlib.figure.Figure at 0x7f15c9fa7ad0>"},"metadata":{},"output_type":"display_data"}],"source":"b=s.get_Barrier(20)\ns.barrierFlag=False\nplt.plot(s.xyz[0],s.get_V())"}
{"cell_type":"code","execution_count":18,"metadata":{"collapsed":false,"scrolled":true,"trusted":true},"outputs":[{"data":{"image/png":"smc-blob::f7ec3a6d-357d-45fd-a2ce-5a5cc7adca5c","text/plain":"<matplotlib.figure.Figure at 0x7f15c9fd6fd0>"},"metadata":{},"output_type":"display_data"}],"source":"e.y.cooling_phase = 1\ne.y.barrierFlag = True\ne.y.t = 0;\ne.y.barrierOffset = 3.5\ne.y.barrierIensity = 10.0\ne.y.barrierWidth = np.array([0.3,])\ne.y.barrierVelocity = np.array([.1275,])\nwith NoInterrupt(ignore=True) as interrupted:\n    while e.y.t < 2*u.ms and not interrupted:\n        e.evolve(100)\n        plt.clf()\n        e.y.plot()\n        plt.plot(e.y.xyz[0],e.y.get_V())\n        display(plt.gcf())\n        clear_output(wait=True)"}
{"cell_type":"code","execution_count":null,"metadata":{"collapsed":true,"trusted":true},"outputs":[],"source":""}