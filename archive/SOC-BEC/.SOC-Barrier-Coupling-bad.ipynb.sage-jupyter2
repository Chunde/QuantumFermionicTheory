{"type":"settings","kernel":"python2-ubuntu","backend_state":"running","metadata":{"language_info":{"codemirror_mode":{"name":"ipython","version":2},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython2","version":"2.7.10"}},"kernel_state":"idle"}
{"type":"cell","id":"bdc075","pos":11,"input":"e.y.cooling_phase = 1\ne.y.barrierFlag = True\ne.y.t = 0;\ne.y.g22 = 0.75 * e.y.g11\ne.y.g12 = 0\ne.y.barrierOffset = -3.5\ne.y.barrierIensity = 10.0\ne.y.barrierWidth = np.array([0.3,])\ne.y.barrierVelocity = np.array([.175,])\nwith NoInterrupt(ignore=True) as interrupted:\n    while e.y.t < 2*u.ms and not interrupted:\n        e.evolve(100)\n        plt.clf()\n        e.y.plot()\n        plt.plot(e.y.xyz[0],e.y.get_V()[0])\n        display(plt.gcf())\n        clear_output(wait=True)","output":{"0":{"data":{"image/png":"95acfc962af094b67deb1bd17d8203a9de246191"},"output_type":"execute_result","exec_count":29}},"cell_type":"code","exec_count":29,"scrolled":true}
{"type":"cell","id":"fc55cd","pos":7,"input":"#print(s.kxyz)\nK1=sum((u.hbar*_k)**2/2.0/u.m for _k in s.kxyz)\n#print(K1)\nK=(u.hbar*s.kxyz[0])**2/u.m\n#print(K)","cell_type":"code","exec_count":25}
{"type":"cell","id":"5223c1","pos":8,"input":"from mmfutils.contexts import NoInterrupt\nfrom pytimeode.evolvers import EvolverSplit, EvolverABM\nfrom IPython.display import display, clear_output\n\ns = State2(Nxyz=(64*4,), Lxyz=(23*u.micron,))\nassert np.allclose(s._N, s.get_N())\ns[0] = 1.0\ns[1] = 1.0\ns.normalize()\ns.cooling_phase = 1j\nE_max = u.hbar**2*np.abs(s.kxyz).max()**2/2.0/u.m\ne = EvolverABM(s, dt=0.1*u.hbar/E_max, normalize=True)\ne.y.plot()\n","output":{"0":{"data":{"image/png":"f65d8706bb58fe6f5ddf5d89ead3e71d853c8050"},"output_type":"execute_result","exec_count":26}},"cell_type":"code","exec_count":26}
{"type":"cell","id":"7e20ab","pos":4,"input":"psi_0 = s.xyz[0]*np.exp(-(s.xyz[0]/a)**2/2)\nplt.semilogy(np.fft.fftshift(s.kxyz[0]), \n         np.fft.fftshift(abs(np.fft.fft(psi_0))), '-+')","output":{"0":{"data":{"text/plain":"[<matplotlib.lines.Line2D at 0x7fd308bc74d0>]"},"output_type":"execute_result","exec_count":22},"1":{"data":{"image/png":"7fa2ac3e5daaf274c6c17ee08aea41868ab6ab1d"},"output_type":"execute_result","exec_count":22}},"cell_type":"code","exec_count":22,"scrolled":true}
{"type":"cell","id":"ddbd98","pos":2,"input":"def get_err(N=128, L=24*u.micron):\n    s = State2(Nxyz=(N,), Lxyz=(L,), N=1e5)\n    s.g11=s.g22=s.g12 = s.RabiFrequency = 0\n    a = np.sqrt(u.hbar/u.m/s.ws[0])\n    x = s.xyz[0]\n    psi_0 = np.exp(-(x/a)**2/2.0)\n    s[...] = psi_0\n    s.normalize()\n    dy = s.empty()\n    s.compute_dy_dt(dy=dy, subtract_mu=True)\n    return abs(dy[...]).max()\nNs = np.arange(2,128,2)\nerrs = map(get_err, Ns)\nplt.semilogy(Ns, errs, '+-')","output":{"0":{"data":{"text/plain":"[<matplotlib.lines.Line2D at 0x7fd30862c090>]"},"output_type":"execute_result","exec_count":20},"1":{"data":{"image/png":"49ddd9ba796a7dcf6f77022097a6efe41d02c920"},"output_type":"execute_result","exec_count":20}},"cell_type":"code","exec_count":20,"scrolled":true}
{"type":"cell","id":"0dccdb","pos":9,"input":"e.y.t=0\ne.y.RabiFrequency = 0\n\ne.y.cooling_phase = 1j\ne.y.barrierFlag = False\ne.y.g22 = 4 * np.pi * u.hbar**2 * u.a/u.m\nwith NoInterrupt(ignore=True) as interrupted:\n    while e.y.t < 1*u.ms and not interrupted:\n        e.evolve(100)\n        plt.clf()\n        e.y.plot()\n        display(plt.gcf())\n        clear_output(wait=True)","output":{"0":{"data":{"image/png":"51a22c7cf082ffb52d6423f2027d9222a957036f"},"output_type":"execute_result","exec_count":27}},"cell_type":"code","exec_count":27}
{"type":"cell","id":"e2b4e8","pos":3,"input":"s = State2(Nxyz=(46,), Lxyz=(23*u.micron,))\na = np.sqrt(u.hbar/u.m/s.ws[0])\nL, N = s.Lxyz[0], s.Nxyz[0]\nk_max = np.pi*(N-2)/L   # For Khalid...\nprint (k_max, s.kxyz[0].max())\nprint(np.exp(-(L/2/a)**2/2))   # Wavefunction drops by factor of macheps","output":{"0":{"name":"stdout","output_type":"stream","text":"(6.010003337302212, 6.010003337302213)\n9.87009441159e-15\n"}},"cell_type":"code","exec_count":21}
{"type":"cell","id":"590069","pos":10,"input":"b=s.get_Barrier(20)\ns.barrierFlag=False\nplt.plot(s.xyz[0],s.get_V()[0])","output":{"0":{"data":{"text/plain":"[<matplotlib.lines.Line2D at 0x7fd308268ed0>]"},"output_type":"execute_result","exec_count":28},"1":{"data":{"image/png":"ca74d2f7f5343ee810beccd1c010aac6680dd85d"},"output_type":"execute_result","exec_count":28}},"cell_type":"code","exec_count":28}
{"type":"cell","id":"1e07e1","pos":12,"input":"e.y.RabiFrequency = 1000\ne.y.cooling_phase = 1\ne.y.barrierFlag = True\ne.y.t = 0;\ne.y.g22 = 0.75 * e.y.g11\ne.y.g12 = 0\ne.y.barrierOffset = -3.5\ne.y.barrierIensity = 10.0\ne.y.barrierWidth = np.array([0.3,])\ne.y.barrierVelocity = np.array([.175,])\nwith NoInterrupt(ignore=True) as interrupted:\n    while e.y.t < 2*u.ms and not interrupted:\n        e.evolve(100)\n        plt.clf()\n        e.y.plot()\n        plt.plot(e.y.xyz[0],e.y.get_V()[0])\n        display(plt.gcf())\n        clear_output(wait=True)","output":{"0":{"ename":"AssertionError","evalue":"","output_type":"error","traceback":["\u001b[0;31m\u001b[0m","\u001b[0;31mAssertionError\u001b[0mTraceback (most recent call last)","\u001b[0;32m<ipython-input-30-4f0bd88ea2aa>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m     11\u001b[0m \u001b[0;32mwith\u001b[0m \u001b[0mNoInterrupt\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mignore\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mTrue\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0minterrupted\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     12\u001b[0m     \u001b[0;32mwhile\u001b[0m \u001b[0me\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0my\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mt\u001b[0m \u001b[0;34m<\u001b[0m \u001b[0;36m2\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0mu\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mms\u001b[0m \u001b[0;32mand\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0minterrupted\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 13\u001b[0;31m         \u001b[0me\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mevolve\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m100\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     14\u001b[0m         \u001b[0mplt\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mclf\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     15\u001b[0m         \u001b[0me\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0my\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mplot\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/projects/990b1d3c-5a22-40a3-849e-cd68d8e43eb4/.local/lib/python2.7/site-packages/pytimeode/evolvers.pyc\u001b[0m in \u001b[0;36mevolve\u001b[0;34m(self, steps, omega)\u001b[0m\n\u001b[1;32m    116\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    117\u001b[0m         \u001b[0;32mfor\u001b[0m \u001b[0mkt\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mxrange\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0msteps\u001b[0m\u001b[0;34m-\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 118\u001b[0;31m             \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdo_step\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    119\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    120\u001b[0m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdo_step\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfinal\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mTrue\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/projects/990b1d3c-5a22-40a3-849e-cd68d8e43eb4/.local/lib/python2.7/site-packages/pytimeode/evolvers.pyc\u001b[0m in \u001b[0;36mdo_step\u001b[0;34m(self, first, final)\u001b[0m\n\u001b[1;32m    344\u001b[0m         \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    345\u001b[0m             \u001b[0;31m# self.do_step_ABM()\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 346\u001b[0;31m             \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdo_step_ABM_numexpr\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    347\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    348\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0mdo_step_runge_kutta\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/projects/990b1d3c-5a22-40a3-849e-cd68d8e43eb4/.local/lib/python2.7/site-packages/pytimeode/evolvers.pyc\u001b[0m in \u001b[0;36mdo_step_ABM_numexpr\u001b[0;34m(self)\u001b[0m\n\u001b[1;32m    486\u001b[0m         \u001b[0;31m# Compute dm = m' in the _tmp array\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    487\u001b[0m         \u001b[0mdm\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_tmp\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 488\u001b[0;31m         \u001b[0mdm\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget_dy\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0my\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mm\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mt\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mt\u001b[0m\u001b[0;34m+\u001b[0m\u001b[0mdt\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdy\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mdm\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    489\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    490\u001b[0m         \u001b[0;31m# Computed dcp\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/projects/990b1d3c-5a22-40a3-849e-cd68d8e43eb4/.local/lib/python2.7/site-packages/pytimeode/evolvers.pyc\u001b[0m in \u001b[0;36mget_dy\u001b[0;34m(self, y, t, dy)\u001b[0m\n\u001b[1;32m    100\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    101\u001b[0m         \u001b[0;32mwith\u001b[0m \u001b[0my\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mlock\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 102\u001b[0;31m             \u001b[0mdy\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0my\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcompute_dy_dt\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdy\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mdy\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    103\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    104\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mt0\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/projects/990b1d3c-5a22-40a3-849e-cd68d8e43eb4/Chunde/SOC-BEC/CoupledState2.pyc\u001b[0m in \u001b[0;36mcompute_dy_dt\u001b[0;34m(self, dy, subtract_mu)\u001b[0m\n\u001b[1;32m    197\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0msubtract_mu\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    198\u001b[0m             \u001b[0mmu\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mbraket\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0my\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mHy\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m/\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mbraket\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0my\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;31m# the energy expectation\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 199\u001b[0;31m             \u001b[0;32massert\u001b[0m \u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mallclose\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mmu\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mimag\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    200\u001b[0m             \u001b[0mHy\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m-=\u001b[0m \u001b[0mmu\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0my\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    201\u001b[0m             \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_mu\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mmu\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mAssertionError\u001b[0m: "]}},"cell_type":"code","exec_count":30}
{"type":"cell","id":"c47167","pos":6,"input":"s = State2(Nxyz=(64,), Lxyz=(23*u.micron,))\ns.plot()\nplt.plot(x, s.get_Vext())\ndy = s.empty()\ns.compute_dy_dt(dy=dy, subtract_mu=False)\nabs(dy[...]).max()","output":{"0":{"data":{"text/plain":"1.2867553465376567"},"output_type":"execute_result","exec_count":24},"1":{"data":{"image/png":"33851fda44336ce031011175a1e5c1b60a5bb0a7"},"output_type":"execute_result","exec_count":24}},"cell_type":"code","exec_count":24,"scrolled":true}
{"type":"cell","id":"7ffbce","pos":1,"input":"%pylab inline --no-import-all\nfrom IPython.display import display, clear_output\ns = State2(Nxyz=(128,), Lxyz=(40*u.micron,),ws = np.array([26.0, ])*u.Hz, N=1e5)\ns.plot()","output":{"0":{"name":"stdout","output_type":"stream","text":"Populating the interactive namespace from numpy and matplotlib\n"},"1":{"data":{"image/png":"736391551c392d8a0f96918b9bddd9c18a9c1efd"},"output_type":"execute_result","exec_count":19}},"cell_type":"code","exec_count":19}
{"type":"cell","id":"ef2744","pos":0,"input":"import math\nimport numpy as np\nfrom mmfutils.performance.fft import fftn, ifftn\nfrom mmfutils.performance.fft import fftn, ifftn\n\nfrom pytimeode import interfaces, mixins, evolvers\nimport CoupledState2\nreload(CoupledState2)\nfrom CoupledState2 import State2, u","cell_type":"code","exec_count":18}
{"type":"cell","id":"c8fe9e","pos":5,"input":"%pylab inline --no-import-all\nfrom IPython.display import display, clear_output\nimport States\nfrom States import State, u\ns = State(Nxyz=(64,), Lxyz=(23*u.micron,), N=1e5)\na = np.sqrt(u.hbar/u.m/s.ws[0])\nx = s.xyz[0]\npsi_0 = np.exp(-(x/a)**2/2)\n#print(x)\n#print(psi_0)\nclass State1(State2):\n    def __init__(self, *v, **kw):\n        State.__init__(self, *v, **kw)\n        a = np.sqrt(u.hbar/u.m/self.ws[0])\n        x = self.xyz[0]\n        k = 1./2./a**2\n        psi_0 = 4.0*np.exp(-(x/a)**2/2)\n        n_0 = abs(psi_0)**2\n        self._V_ext = (u.hbar**2/2.0/u.m*(4*(k*x)**2 - 2*k) - self.g*n_0)\n        self.data[...] = psi_0\n        self.get_Vext = lambda: self._V_ext\n        self.pre_evolve_hook()","output":{"0":{"name":"stdout","output_type":"stream","text":"Populating the interactive namespace from numpy and matplotlib\n"}},"cell_type":"code","exec_count":23}
{"type":"file","last_load":1495499658955}