{"anaconda-cloud":{},"kernelspec":{"display_name":"Python 2 (Ubuntu, plain)","language":"python","name":"python2-ubuntu"},"language_info":{"codemirror_mode":{"name":"ipython","version":2},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython2","version":"2.7.10"},"toc":{"nav_menu":{"height":"12px","width":"252px"},"navigate_menu":true,"number_sections":true,"sideBar":true,"threshold":4,"toc_cell":false,"toc_section_display":"block","toc_window_display":false}}
{"cell_type":"code","execution_count":1,"metadata":{"collapsed":false,"trusted":true},"outputs":[{"data":{"text/html":"smc-blob::e524812a-4391-4403-b041-fdda9c2dd3b6","text/plain":"<IPython.core.display.HTML object>"},"metadata":{},"output_type":"display_data"},{"data":{"application/javascript":"smc-blob::af3dc0c4-87ab-4e89-bdf8-f221d33e1dda","text/plain":"<IPython.core.display.Javascript object>"},"metadata":{},"output_type":"display_data"},{"data":{"text/html":"smc-blob::540c5d05-cc63-4445-a155-e438df6294f7","text/plain":"<IPython.core.display.HTML object>"},"metadata":{},"output_type":"display_data"}],"source":"import mmf_setup;mmf_setup.nbinit()"}
{"cell_type":"code","execution_count":2,"metadata":{"collapsed":false,"trusted":true},"outputs":[{"name":"stdout","output_type":"stream","text":"Populating the interactive namespace from numpy and matplotlib\n"}],"source":"%pylab inline --no-import-all\nfrom IPython.display import display, clear_output"}
{"cell_type":"code","execution_count":3,"metadata":{"collapsed":false,"trusted":true},"outputs":[],"source":"from pytimeode.evolvers import EvolverABM, EvolverSplit\nfrom mmfutils.contexts import NoInterrupt"}
{"cell_type":"code","execution_count":4,"metadata":{"collapsed":false,"trusted":true},"outputs":[{"data":{"image/png":"smc-blob::a47f960b-dafc-48cf-a222-26983555fc54","text/plain":"<matplotlib.figure.Figure at 0x7f5c0fae5110>"},"metadata":{},"output_type":"display_data"}],"source":"import bec;reload(bec)\nfrom bec import State, u\ns = State(N=1e1, Nxyz=(2**7,), Lxyz=(20*u.micron,))\ns.pre_evolve_hook()\ns._N = 1e1\ns.normalize()\ns.plot()\ns.cooling_phase = 1j\n\ne = EvolverSplit(s, dt=1.0, normalize=True)\n\nE_tol = 1e-8\nE1 = e.y.get_energy()\nE0 = E1 + 2*E_tol\n\nlog = True\n\nwith NoInterrupt(ignore=True) as interrupted:\n    while not interrupted and abs(E1 - E0) > E_tol:\n        e.evolve(100)\n        E0, E1 = E1, e.y.get_energy()\n        plt.clf()\n        e.y.plot(log=log)\n        display(plt.gcf())\n        clear_output(wait=True)\n\ne.dt = 0.01\nE0 = E1 + 2*E_tol        \nwith NoInterrupt(ignore=True) as interrupted:\n    while not interrupted and abs(E1 - E0) > E_tol/100:\n        print abs(E1 - E0)\n        e.evolve(100)\n        E0, E1 = E1, e.y.get_energy()\n        plt.clf()\n        e.y.plot(log=log)\n        display(plt.gcf())\n        clear_output(wait=True)\n\nfact = 100.0\ne = EvolverABM(e.get_y(), dt=1.0/fact)\nE0 = E1 + 2*E_tol        \nwith NoInterrupt(ignore=True) as interrupted:\n    while not interrupted and abs(E1 - E0) > E_tol/fact/10:\n        print abs(E1 - E0)\n        e.evolve(100)\n        E0, E1 = E1, e.y.get_energy()\n        plt.clf()\n        e.y.plot(log=log)\n        display(plt.gcf())\n        clear_output(wait=True) \ns = e.get_y()"}
{"cell_type":"markdown","metadata":{},"source":"# Normal Modes"}
{"cell_type":"markdown","metadata":{},"source":"Here we consider the fluctuations about a stationary state $\\psi_0$ of the GPE:\n\n$$\n  \\psi = \\psi_0 + u(x)e^{\\I\\omega t} + v^*(x) e^{-\\I\\omega t}.\n$$\n\nThis gives the following generalized eigenvalue problem for the modes:\n\n$$\n  \\begin{pmatrix}\n    \\op{H} + g n_0 & g\\psi_0^2\\\\\n    g \\bar{\\psi}_0^2 & \\bar{\\op{H}} + g n_0\n  \\end{pmatrix}\\cdot\n  \\begin{pmatrix}\n    u(x)\\\\\n    v(x)\n  \\end{pmatrix}\n  =\n  \\omega\n  \\begin{pmatrix}\n    \\mat{1} \\\\\n     & -\\mat{1}\n  \\end{pmatrix}\\cdot\n  \\begin{pmatrix}\n    u(x)\\\\\n    v(x)\n  \\end{pmatrix},\n$$\n\nwhere $n_0 = \\abs{\\psi_0}^2$ and $\\op{H} = -\\hbar^2\\nabla^2/2m + gn_0 + \\op{V}_{\\text{ext}}$ is the single-particle Hamiltonian for the ground state. To solve this numerically, we write this as $\\mat{A}\\cdot\\vect{q} = \\omega \\mat{B}\\cdot\\vect{q}$.\n\nThese matrices have the following properties: $\\mat{A} = \\mat{A}^\\dagger$ and $\\mat{B} = \\mat{B}^\\dagger$ are Hermitian, and the matrix $\\mat{C} = \\mat{C}^{-1} =  \\bigl(\\begin{smallmatrix}&\\mat{1}\\\\\\mat{1}\\end{smallmatrix}\\bigr)$ conjugates $\\mat{A}$:\n\n$$\n  \\mat{C}\\cdot\\mat{A}\\cdot\\mat{C} = \\bar{\\mat{A}}\\\\\n  \\mat{C}\\cdot\\mat{B}\\cdot\\mat{C} = -\\bar{\\mat{B}}.\n$$.  Thus, if we have one eigenvalue $\\omega_{+}$ and eigenvector $\\vect{q}_{+}$, then, we must have another pair $\\omega_{-} = \\bar{\\omega}_{+}$ and $\\vect{q}_{-} = \\mat{C}\\cdot\\bar{\\vect{q}}_{+}$:\n\n$$\n  \\mat{A}\\vect{q}_{+} = \\omega_+ \\mat{B}\\vect{q}_{+}\\\\\n  \\bar{\\mat{A}}\\mat{C}\\vect{q}_{+} = \\omega_+ \\bar{\\mat{B}}\\mat{C}\\vect{q}_{+}.\n$$\n\nFurthermore, if $\\psi_0$ is a stationary state, then $\\op{H}\\psi_0 = \\mu\\psi_0$.\n\n\n\nOne has two choices: solve the non-symmetric eigenvalue problem $(\\mat{B}^{-1}\\cdot\\mat{A})\\cdot\\vect{q} = \\omega\\vect{q}$, or try to massage this into a form where $\\mat{B}$ is positive definite."}
{"cell_type":"markdown","metadata":{},"source":"$$\n  (\\mat{A} + 2\\mat{1})\\cdot\\vect{q} = (\\omega\\mat{B} + 2\\mat{I})\\cdot\\vect{q}\n$$"}
{"cell_type":"markdown","metadata":{},"source":"## Fixed Particle Number"}
{"cell_type":"markdown","metadata":{},"source":"Let $\\psi = \\psi_0 + \\d{\\psi}$.  The change in density is:\n\n$$\n  \\dot{n} = \\dot{\\psi}^\\dagger \\psi_0 + \\psi_0^\\dagger \\dot{\\psi} \n          + \\dot{\\psi}^\\dagger \\dot{\\psi}\n$$\n$$\n  n - n_0 = e^{-\\I\\omega t}(u \\psi_0^* + v\\psi_0)\n  + e^{\\I\\omega t}(u^* \\psi_0 + v^*\\psi_0^*)\n  + e^{-2\\I\\omega t} u^*v^*\n  + e^{2\\I\\omega t} uv\n  + (u^*u + v^*v)\n$$\n\nparticle number is:\n\n$$\n  \\d{N} = \\int\\left(\n    \\d{\\psi}^\\dagger \\psi_0 + \\psi_0^\\dagger \\d{\\psi} + \\d{\\psi}^\\dagger \\d{\\psi}\n  \\right)\\d{x}\\\\\n  = e^{-\\I\\omega t}\\int(u \\psi_0^* + v\\psi_0)\\d{x}\n  + e^{\\I\\omega t}\\int(u^* \\psi_0 + v^*\\psi_0^*)\\d{x}\n  + e^{-2\\I\\omega t} \\int u^*v^*\\d{x}\n  + e^{2\\I\\omega t}\\int uv\\d{x}\n  + \\int(u^*u + v^*v)\\d{x}\n$$\n\nTo linear order, conservation of particle number thus implies that\n\n$$\n  \\int(u \\psi_0^\\dagger + v\\psi_0)\\d{x} = 0.\n$$"}
{"cell_type":"code","execution_count":6,"metadata":{"collapsed":false,"trusted":true},"outputs":[],"source":"import scipy.linalg\nsp = scipy\nH = s.get_H()\nn_0 = s.get_density().ravel()\npsi_0 = 1*s[...].ravel()\nA = np.bmat(\n    [[H + np.diag(s.g*n_0), np.diag(s.g*psi_0**2)],\n     [np.diag(s.g*psi_0.conj()**2), H.conj() + np.diag(s.g*n_0)]])\nA = np.asarray(A)\ni = np.eye(len(H))\nz = np.zeros_like(H)\nB = np.asarray(np.bmat([[i, z], [z, -i]]))\nC = np.asarray(np.bmat([[z, i], [i, z]]))\nI = np.eye(2*len(H))\n\nassert np.allclose(C.dot(C), I)\nassert np.allclose(C.dot(A).dot(C), A.conj())\nws, uvs = sp.linalg.eig(np.linalg.inv(B).dot(A))\ninds = np.argsort(abs(ws.real))\nws = ws[inds]\nuvs = uvs[:, inds]\nus, vs = uvs.reshape((2, len(H), 2*len(H)))"}
{"cell_type":"code","execution_count":8,"metadata":{"collapsed":false,"trusted":true},"outputs":[{"data":{"text/plain":"(array([ -7.88566951e-14 -1.20191527e-06j,\n          7.90536494e-14 +1.20191527e-06j,\n          5.61200751e-03 -1.17231367e-16j,\n         -5.61200751e-03 +1.32060376e-16j,\n         -9.84279539e-03 -2.60869305e-17j,\n          9.84279539e-03 +3.97143261e-17j,\n         -1.41493681e-02 -3.15801127e-18j,\n          1.41493681e-02 +7.79079834e-17j,\n         -1.85776625e-02 +1.73762109e-17j,   1.85776625e-02 +4.57511543e-17j]),\n 0.0056116228538338614)"},"execution_count":8,"metadata":{},"output_type":"execute_result"}],"source":"ws[:10], s.ws[0]"}
{"cell_type":"code","execution_count":38,"metadata":{"collapsed":false,"trusted":true},"outputs":[{"data":{"image/png":"smc-blob::520137bc-75d9-4c44-a6ff-0b5b33f217f7","text/plain":"<matplotlib.figure.Figure at 0x7f5c09dcf710>"},"metadata":{},"output_type":"display_data"}],"source":"s.cooling_phase = 1.0\ns.pre_evolve_hook()\ns.cooling_phase = 1.0\ns.t = 0.0\n\nmode = 4\nd = 0.001\nu_, v_ = us[:, mode], vs[:, mode]\ns[...] = psi_0 + d*(u_ + v_.conj())\nw = ws[mode].real\nT = 2*np.pi / w \ndt = T/100/100\ne = EvolverSplit(s, dt=dt, normalize=False)\nlog = False\nx = s.xyz[0]\nwith NoInterrupt(ignore=True) as interrupted:\n    while not interrupted:\n        e.evolve(100)\n        plt.clf()\n        #e.y.plot(log=log)\n        t = e.y.t\n        psi = psi_0 + d*(u_*np.exp(1j*w*t) + v_.conj()*np.exp(-1j*w*t))\n        plt.plot(x, abs(e.y[...])**2 - abs(psi_0)**2)\n        plt.plot(x, abs(psi)**2 - abs(psi_0)**2)\n\n        #plt.ylim(0, 2)\n        plt.xlim(-6, 6)\n        plt.title(\"N = {}\".format(e.y.get_N()))\n        display(plt.gcf())\n        clear_output(wait=True)\n"}
{"cell_type":"code","execution_count":39,"metadata":{"collapsed":false,"trusted":true},"outputs":[{"data":{"text/plain":"True"},"execution_count":39,"metadata":{},"output_type":"execute_result"}],"source":"np.allclose(np.linalg.inv(B).dot(A).dot(uvs), ws[None,:]*uvs)"}