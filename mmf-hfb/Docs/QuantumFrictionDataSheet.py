# ---
# jupyter:
#   jupytext:
#     formats: ipynb,py:light
#     text_representation:
#       extension: .py
#       format_name: light
#       format_version: '1.4'
#       jupytext_version: 1.2.3
#   kernelspec:
#     display_name: Python 3
#     language: python
#     name: python3
# ---

import mmf_setup;mmf_setup.nbinit()
import matplotlib.pyplot as plt
# %pylab inline --no-import-all
from nbimports import *
import numpy as np
from mmf_hfb.BCSCooling import BCSCooling
from mmf_hfb.Potentials import HarmonicOscillator
from mmf_hfb.SolverABM import ABMEvolverAdapter
from os.path import join
import inspect
import json
import glob
import os
from IPython.display import display, clear_output
from mmf_hfb.CoolingCaseTests import TestCase, Prob, Normalize, dict_to_complex, random_gaussian_mixing


# # 1D Cooling

# +
def get_init_states(N=128, dx=0.1):
    b = BCSCooling(N=N, dx=dx)
    h = HarmonicOscillator()
    x = b.xyz[0]
    V = x**2/2
    H0 = b._get_H(mu_eff=0, V=0)
    H1 = b._get_H(mu_eff=0, V=V)
    U0, E0 = b.get_U_E(H0, transpose=True)
    U1, E1 = b.get_U_E(H1, transpose=True)
    psi_standing_wave=Normalize(U0[1],dx=dx)
    psi_gaussian_mixing = random_gaussian_mixing(x, dx=dx)
    psi_uniform = Normalize(U0[0], dx=dx)
    psi_bright_soliton = Normalize(np.exp(-x**2/2.0)*np.exp(1j*x), dx=dx)
    return dict(ST=psi_standing_wave, GM=psi_gaussian_mixing, UN=psi_uniform, BS=psi_bright_soliton)

def PN(psi, dx):
    return Prob(Normalize(psi, dx=dx))

def get_potentials(x):
    V0 = 0*x
    V_HO = x**2/2
    V_PO = V0 + np.random.random()*V_HO + abs(x**2)*np.random.random()
    return dict(V0=V0, HO=V_HO, PO=V_PO)
h = HarmonicOscillator()


# -

# # Test Bed
# * code used to check results generated by the code in [CoolingCaseTests.py](CoolingCaseTests.py)

def Check_Test_Case(beta_H=1, beta_V=10, beta_K=0,  N=128, dx=0.2, g=1, Tp=20, Tg=20, V_key = 'V0', psi_key='ST'):
    psis_init = get_init_states(N=N, dx=dx)
    psi_init= psis_init[psi_key]
    b = BCSCooling(N=N, dx=dx)
    x = b.xyz[0]
    Vs = get_potentials(x)
    args = dict(
        N=N, dx=dx, eps=1e-1, T_ground_state=Tg, V=Vs[V_key],
        V_key=V_key, g=g, psi_init=psi_init, use_abm=False, check_dE=False)
    t=TestCase(ground_state_eps=1e-1, beta_0=1, beta_H=beta_H, **args)
    plt.figure(figsize=(15, 5))
    t.b.beta_V=beta_V
    t.b.beta_K=beta_K
    t.run(T=Tp, plot=True, plot_log=False)
    print(t.E_init, t.Es[-1])


Check_Test_Case(g=-1, Tg=5, Tp=5,beta_V=10, beta_K=0, psi_key="ST", V_key="HO")


# ## Check Overall factor $\beta_H$ vs Wall Time

def test_wall_time(N=128, dx=0.2, beta_V=0, beta_K=0, beta_Y=0):
    psis_init = get_init_states(N=N, dx=dx)
    psi_init= psis_init["ST"]
    b = BCSCooling(N=N, dx=dx)
    x = b.xyz[0]
    V_key="HO"
    g = 0
    Vs = get_potentials(x)
    args = dict(
        N=N, dx=dx, eps=1e-1, T_ground_state=5, V=Vs[V_key],
        V_key=V_key, g=g, psi_init=psi_init, use_abm=False, check_dE=False)
    t=TestCase(ground_state_eps=1e-1, beta_0=1, **args)
    
    t.b.beta_V= beta_V
    t.b.beta_K = beta_K
    t.b.keta_Y = beta_Y
    
    for beta_H in [1, 2, 3, 4]:
        Es = []
        Tsw = []
        t.b.beta_H=beta_H
        Ts = np.linspace(0, 2, 20)/beta_H
        for T in Ts:
            t.run(T=T, plot=False, plot_log=False)
            Es.append(t.Es[-1])
            Tsw.append(t.wall_time[-1])
        plt.loglog(Tsw, (np.array(Es) - t.E0)/t.E0, label=f"beta_H={beta_H}")
    plt.xlabel("Wall Time")
    plt.ylabel("(E-E0)/E0")
    plt.legend()


plt.figure(figsize=(18, 5))
plt.subplot(131)
test_wall_time(beta_V=20, beta_K=0, beta_Y=0)
plt.subplot(132)
test_wall_time(beta_V=20, beta_K=20, beta_Y=0)
plt.subplot(133)
test_wall_time(beta_V=0, beta_K=20, beta_Y=0)
clear_output()

# # 2D Cooling
# * not that slow

s = BCSCooling(N=32, dx=0.1, beta_0=-1.0j, beta_V=0.0, beta_K=0.0,g=0, dim=2)
x, y = s.xyz
V = sum(_x**2 for _x in s.xyz)
s.V = np.array(V)/2
x0 = 0.5
phase = ((x-x0) + 1j*y)*((x+x0) - 1j*y)
psi0 = 1.0*np.exp(1j*np.angle(phase))
ts, psis = s.solve([psi0], T=5.0, rtol=1e-5, atol=1e-6)
#plt.subplot(121)
s.plot(psis[0][-1])
#plt.subplot(122)
Es = [s.get_E_Ns([psi])[0] for psi in psis[0]]
plt.semilogy(ts[0], Es)

s.beta_0=1
s.beta_V=20
ts, psis = s.solve([psi0], T=3, rtol=1e-5, atol=1e-6)
s.plot(psis[0][-1])
Es = [s.get_E_Ns([psi])[0] for psi in psis[0]]
plt.semilogy(ts[0], Es)

import time
class TestCase2D(object):
    def __init__(self, T=5, g=0, **args):
        b = BCSCooling(N=32, dx=0.1, beta_0=-1j, g=g, dim=2, **args)
        x, y =b.xyz
        V = sum(_x**2 for _x in b.xyz)
        b.V = np.array(V)/2
        x0 = 0.5
        phase = ((x-x0) + 1j*y)*((x+x0) - 1j*y)
        psi_init = 1.0*np.exp(1j*np.angle(phase))
        _, psis = b.solve([psi_init], T=T, rtol=1e-5, atol=1e-6)
        psi_ground = psis[0][-1]
        E0 = b.get_E_Ns([psi_ground])[0]
        print(f"Ground state energy={E0}")
        self.E0 = E0
        self.psi_ground=psi_ground
        self.psi_init = psi_init
        self.b = b
        
    def get_E_Tw(self, beta_V, beta_K=0, beta_D=0, beta_Y=0, T=5):
        b = self.b
        b.beta_V = beta_V
        b.beta_K = beta_K
        b.beta_D = beta_D
        b.beta_Y = beta_Y
        start_time = time.time()
        _, psis = b.solve([self.psi_init], T=T, rtol=1e-5, atol=1e-6)
        wall_time = time.time() - start_time
        Ei = b.get_E_Ns([psis[0][0]])[0]
        Ef = b.get_E_Ns([psis[0][-1]])[0]
        return (Ei, Ef, wall_time)


c=TestCase2D(g=1, T=5)

c.get_E_Tw(beta_V=20)

# # Load CVS file

import pandas as pd 
import sys

currentdir = join(os.path.dirname(os.path.abspath(inspect.getfile(inspect.currentframe()))),"..","..", "data")

# ## Excel to CVS
# * conver excel file to cvs

import pandas as pd
files = glob.glob(join(currentdir, "*.xls"))
for file in files:
    csv_file = os.path.splitext(file)[0] + ".csv"
    if os.path.exists(csv_file):
        continue
    data_xls = pd.read_excel(file, 'overall', index_col=None)
    data_xls.to_csv(csv_file, encoding='utf-8')
    print(f"generated file:{cvs_file}")


# +
def CombineExcelSheetsToCSV(file_path=None):
    if file_path is None:
        file_path = join(currentdir, 'CoolingTestData1D.xlsx')

    df = pd.concat(pd.read_excel(file_path, sheet_name=None), ignore_index=True)
    file_stem = file_path.split()[0] # not right
    df.to_csv( join(file_stem +".csv"), encoding='utf-8')
    return df

def ReadAllExcelFile():
    files = glob.glob(join(currentdir, "*.csv"))
    data = pd.concat([pd.read_csv(file) for file in files])
    data.to_excel(join(currentdir, "data.xlsx"), sheet_name='overall')
    return data


# -

# ## Plot $(E-E_0)/E_0$ vs Wall-Time

data = CombineExcelSheetsToCSV()

istate = set(data['iState'])
res = data.query(f"iState=='BS'")


# +
def get_Es_Ts(beta_K, beta_V, iState, V, g):
    res = data.query(f"beta_K=={beta_K} and beta_V=={beta_V}and g=={g} and iState== '{iState}'and V=='{V}'")
    Ts = res['wTime']
    E0 = res['E0']
    Ef = res['Ef']
    dE = (Ef- E0)/E0
    return dE, Ts

def plot_Es_Ts(beta_K, beta_V, g, V, iState, line='-', style=None):
    Es, Ts = get_Es_Ts(beta_K=beta_K, beta_V=beta_V, V=V, g=g, iState=iState)
    if Ts is None or len(Ts) ==0:
        return
    x = Ts
    y = Es
    if len(y) > 0:
        if style is None:
            plt.plot(x, y, line, label=r"$\beta_V$"+f"={beta_V},"+r"$\beta_K$"+f"={beta_K}, iState={iState}, g={g}")
        elif style=='log':
            plt.loglog(x,y, line, label=r"$\beta_V$"+f"={beta_V},"+r"$\beta_K$"+f"={beta_K}, iState={iState}, g={g}")
        elif style == 'semi':
            plt.semilogy(x, y, line, label=r"$\beta_V$"+f"={beta_V},"+r"$\beta_K$"+f"={beta_K}, iState={iState}, g={g}")
        else:
            plt.plot(x, y, line, label=r"$\beta_V$"+f"={beta_V},"+r"$\beta_K$"+f"={beta_K}, iState={iState}, g={g}")
    return Es, Ts


# -

def BestPlot(v, v1, k1,iState="ST",g=None, style="semi", V="HO"): 
    plt.figure(figsize=(10, 8))    
    gs = [-1, 0, 1] if g is None else [g]    
    for g in gs:
        plot_Es_Ts(beta_V=v, beta_K=0, iState=iState, g=g, V=V,style=style);
        plot_Es_Ts(beta_V=v1, beta_K=k1, iState=iState, g=g, V=V,line='--', style=style);
    plt.ylabel("(E-E0)/E0")
    plt.xlabel("Wall Time")
    plt.legend()


BestPlot(30, 10, 60, g=1)

BestPlot(10, 10, 50,iState="UN", style="semi", V="HO")

BestPlot(30, 20, 30, iState="GM",g=0, style="semi", V="HO")

BestPlot(90, 100, 50, iState="BS",g=1, style="semi", V="HO")




