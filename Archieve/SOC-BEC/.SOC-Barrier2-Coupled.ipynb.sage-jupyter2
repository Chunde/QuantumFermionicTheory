{"type":"settings","kernel":"python2-ubuntu","kernel_state":"idle","backend_state":"running","trust":true,"metadata":{"language_info":{"codemirror_mode":{"name":"ipython","version":2},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython2","version":"2.7.10"}}}
{"type":"cell","id":"982133","pos":4,"input":"%pylab inline --no-import-all\nfrom IPython.display import display, clear_output\nimport States\nfrom States import State, u\ns = State(Nxyz=(64,), Lxyz=(23*u.micron,), N=1e5)\na = np.sqrt(u.hbar/u.m/s.ws[0])\nx = s.xyz[0]\npsi_0 = np.exp(-(x/a)**2/2)\nclass State1(State2):\n    def __init__(self, *v, **kw):\n        State.__init__(self, *v, **kw)\n        a = np.sqrt(u.hbar/u.m/self.ws[0])\n        x = self.xyz[0]\n        k = 1./2./a**2\n        psi_0 = 4.0*np.exp(-(x/a)**2/2)\n        n_0 = abs(psi_0)**2\n        self._V_ext = (u.hbar**2/2.0/u.m*(4*(k*x)**2 - 2*k) - self.g*n_0)\n        self.data[...] = psi_0\n        self.get_Vext = lambda: self._V_ext\n        self.pre_evolve_hook()","output":{"0":{"name":"stdout","output_type":"stream","text":"Populating the interactive namespace from numpy and matplotlib\n"}},"cell_type":"code","exec_count":5}
{"type":"cell","id":"bd04d0","pos":0,"input":"import math\nimport numpy as np\nfrom mmfutils.performance.fft import fftn, ifftn\nfrom pytimeode import interfaces, mixins, evolvers\nimport State2Coupled\nreload(State2Coupled)\nfrom State2Coupled import State2, u","cell_type":"code","exec_count":1}
{"type":"cell","id":"9e29ef","pos":1,"input":"%pylab inline --no-import-all\nfrom IPython.display import display, clear_output55390\ns = State2(Nxyz=(128,), Lxyz=(40*u.micron,),ws = np.array([26.0, ])*u.Hz, N=1e5)\ns.plot()","output":{"0":{"name":"stdout","output_type":"stream","text":"Populating the interactive namespace from numpy and matplotlib\n"},"1":{"ename":"ImportError","evalue":"cannot import name clear_output55390","output_type":"error","traceback":["\u001b[0;31m\u001b[0m","\u001b[0;31mImportError\u001b[0mTraceback (most recent call last)","\u001b[0;32m<ipython-input-2-998c6fe37f92>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0mget_ipython\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mmagic\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34mu'pylab inline --no-import-all'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 2\u001b[0;31m \u001b[0;32mfrom\u001b[0m \u001b[0mIPython\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdisplay\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mdisplay\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mclear_output55390\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      3\u001b[0m \u001b[0ms\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mState2\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mNxyz\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m128\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mLxyz\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m40\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0mu\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mmicron\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mws\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0marray\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m26.0\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0mu\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mHz\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mN\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m1e5\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      4\u001b[0m \u001b[0ms\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mplot\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mImportError\u001b[0m: cannot import name clear_output55390"]}},"cell_type":"code","exec_count":2,"scrolled":true}
{"type":"cell","id":"0cf057","pos":2,"input":"def get_err(N=128, L=24*u.micron):\n    s = State2(Nxyz=(N,), Lxyz=(L,), N=1e5)\n    s.g11=s.g22=s.g12=s.RabiFrequency=0\n    a = np.sqrt(u.hbar/u.m/s.ws[0])\n    x = s.xyz[0]\n    psi_0 = np.exp(-(x/a)**2/2.0)\n    s[...] = psi_0\n    s.normalize()\n    dy = s.empty()\n    s.compute_dy_dt(dy=dy, subtract_mu=True)\n    return abs(dy[...]).max()\nNs = np.arange(2,128,2)\nerrs = map(get_err, Ns)\nplt.semilogy(Ns, errs, '+-')","output":{"0":{"data":{"text/plain":"[<matplotlib.lines.Line2D at 0x7fb91aedbdd0>]"},"output_type":"execute_result","exec_count":3},"1":{"data":{"image/png":"49ddd9ba796a7dcf6f77022097a6efe41d02c920"},"output_type":"execute_result","exec_count":3}},"cell_type":"code","exec_count":3,"scrolled":true}
{"type":"cell","id":"6f6a45","pos":3,"input":"s = State2(Nxyz=(46,), Lxyz=(23*u.micron,))\na = np.sqrt(u.hbar/u.m/s.ws[0])\nL, N = s.Lxyz[0], s.Nxyz[0]\nk_max = np.pi*(N-2)/L   # For Khalid...\nprint (k_max, s.kxyz[0].max())\nprint(np.exp(-(L/2/a)**2/2))   # Wavefunction drops by factor of macheps","output":{"0":{"name":"stdout","output_type":"stream","text":"(6.010003337302212, 6.010003337302213)\n9.87009441159e-15\n"}},"cell_type":"code","exec_count":4}
{"type":"cell","id":"d34580","pos":5,"input":"s = State2(Nxyz=(64,), Lxyz=(23*u.micron,))\ns.plot()\nplt.plot(x, s.get_Vext())\ndy = s.empty()\ns.compute_dy_dt(dy=dy, subtract_mu=False)\nabs(dy[...]).max()","output":{"0":{"data":{"text/plain":"1.2867553465376567"},"output_type":"execute_result","exec_count":6},"1":{"data":{"image/png":"33851fda44336ce031011175a1e5c1b60a5bb0a7"},"output_type":"execute_result","exec_count":6}},"cell_type":"code","exec_count":6,"scrolled":true}
{"type":"cell","id":"f41195","pos":6,"input":"from mmfutils.contexts import NoInterrupt\nfrom pytimeode.evolvers import EvolverSplit, EvolverABM\nfrom IPython.display import display, clear_output\n\ns = State2(Nxyz=(64*4,), Lxyz=(23*u.micron,))\nassert np.allclose(s._N, s.get_N())\ns[0] = 1.0\ns[1] = 1.0\ns.normalize()\ns.cooling_phase = 1j\nE_max = u.hbar**2*np.abs(s.kxyz).max()**2/2.0/u.m\ne = EvolverABM(s, dt=0.0001*u.hbar/E_max, normalize=True)\ne.y.plot()","output":{"0":{"data":{"image/png":"f65d8706bb58fe6f5ddf5d89ead3e71d853c8050"},"output_type":"execute_result","exec_count":7}},"cell_type":"code","exec_count":7,"scrolled":true}
{"type":"cell","id":"5c9b06","pos":7,"input":"s.get_CouplingTerm();","cell_type":"code","exec_count":8}
{"type":"cell","id":"54a2a1","pos":8,"input":"dy = s.empty()\ndy = s.compute_dy_dt(dy)\ndy.plot()","output":{"0":{"data":{"image/png":"27de509f50729f2dfa4e22a7a886f05c70136511"},"output_type":"execute_result","exec_count":9}},"cell_type":"code","exec_count":9,"scrolled":true}
{"type":"cell","id":"34f027","pos":9,"input":"\nwith NoInterrupt(ignore=True) as interrupted:\n    while e.y.t < 4*u.ms and not interrupted:\n        e.evolve(100)\n        #print(e.y.get_N())\n        plt.clf()\n        e.y.plot()\n        display(plt.gcf())\n        clear_output(wait=True)","output":{"0":{"data":{"image/png":"7231d86bb4fcf136169eb175f58c76d598fda072"},"output_type":"execute_result","exec_count":16}},"cell_type":"code","exec_count":16}
{"type":"cell","id":"8aaf72","pos":10,"input":"s.cooling_phase = 1j\ns.barrierFlag = False\ns.RabiFrequency=1\ns.g22 = 0.9 * 4 * np.pi * u.hbar**2 * u.a/u.m\ne = EvolverABM(s, dt=0.01*u.hbar/E_max, normalize=False)","cell_type":"code","exec_count":0}
{"type":"cell","id":"b66938","pos":11,"input":"%debug","cell_type":"code","exec_count":0}
{"type":"cell","id":"a072cd","pos":12,"input":"s.braket(s[...],s[...])\ns[...].shape","cell_type":"code","exec_count":0}
{"type":"cell","id":"ebbae4","pos":13,"input":"b=s.get_Barrier(20)\ns.barrierFlag=False\nplt.plot(s.xyz[0],s.get_V()[0])","cell_type":"code","exec_count":0}
{"type":"cell","id":"5a4189","pos":14,"input":"e.y.cooling_phase = 1\ne.y.barrierFlag = True\ne.y.t = 0\n#e.y.g22 = 0.75 * e.y.g11\ne.y.g12 = 0\ne.y.barrierOffset = -3.5\ne.y.barrierIntensity = 10.0\ne.y.barrierWidth = np.array([0.3,])\ne.y.barrierVelocity = np.array([.175,])\nwith NoInterrupt(ignore=True) as interrupted:\n    while e.y.t < u.ms and not interrupted:\n        e.evolve(100)\n        plt.clf()\n        e.y.plot()\n        plt.plot(e.y.xyz[0],e.y.get_V()[0])\n        display(plt.gcf())\n        clear_output(wait=True)","output":{"0":{"data":{"image/png":"33da75fa3b665dd7e22beb1d2c4db6ecb20685f4"},"output_type":"execute_result","exec_count":17}},"cell_type":"code","exec_count":17}
{"type":"file","last_load":1495662620146}
{"output":{"0":{"data":{"image/png":"257464fa055b875397791a569335d61a64004974"}}},"exec_count":17,"start":1495662460654,"input":"e.y.cooling_phase = 1\ne.y.barrierFlag = True\ne.y.t = 0\n#e.y.g22 = 0.75 * e.y.g11\ne.y.g12 = 0\ne.y.barrierOffset = -3.5\ne.y.barrierIntensity = 10.0\ne.y.barrierWidth = np.array([0.3,])\ne.y.barrierVelocity = np.array([.175,])\nwith NoInterrupt(ignore=True) as interrupted:\n    while e.y.t < u.ms and not interrupted:\n        e.evolve(100)\n        plt.clf()\n        e.y.plot()\n        plt.plot(e.y.xyz[0],e.y.get_V()[0])\n        display(plt.gcf())\n        clear_output(wait=True)","state":"done","pos":15,"type":"cell","end":1495662941970,"id":"3ec7df","kernel":"python2-ubuntu"}