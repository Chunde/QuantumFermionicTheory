{"anaconda-cloud":{},"kernelspec":{"display_name":"Python 2 (Ubuntu, plain)","language":"python","name":"python2-ubuntu"},"language_info":{"codemirror_mode":{"name":"ipython","version":2},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython2","version":"2.7.10"},"nav_menu":{},"toc":{"nav_menu":{"height":"12px","width":"252px"},"navigate_menu":true,"number_sections":true,"sideBar":true,"threshold":6,"toc_cell":false,"toc_section_display":"block","toc_window_display":false}}
{"cell_type":"markdown","metadata":{},"source":"We base the physical parameters on a system like [Marago:2001] so we can explore damping of the normal modes of the system.  They have trapping frequencies of $\\omega_y=\\omega_z = 128$Hz and $\\omega_x = \\sqrt{8}\\omega_y$ and $N = 2\\times 10^4$ particles.  In the TF approximation at $T=0$ this corresponds to $\\mu = $\n\n[Marago:2001]: http://dx.doi.org/10.1103/PhysRevLett.86.3938 (Onofrio Marag\\`o, Gerald Hechenblaikner, Eleanor Hodby, and Christopher Foot, \"Temperature Dependence of Damping and Frequency Shifts of the Scissors Mode of a Trapped Bose-Einstein Condensate\", Phys. Rev. Lett. 86, 3938--3941 (2001) )"}
{"cell_type":"code","execution_count":1,"metadata":{"collapsed":false,"trusted":false},"outputs":[{"data":{"text/html":"smc-blob::e524812a-4391-4403-b041-fdda9c2dd3b6","text/plain":"<IPython.core.display.HTML object>"},"metadata":{},"output_type":"display_data"},{"data":{"application/javascript":"smc-blob::af3dc0c4-87ab-4e89-bdf8-f221d33e1dda","text/plain":"<IPython.core.display.Javascript object>"},"metadata":{},"output_type":"display_data"},{"data":{"text/html":"smc-blob::540c5d05-cc63-4445-a155-e438df6294f7","text/plain":"<IPython.core.display.HTML object>"},"metadata":{},"output_type":"display_data"}],"source":"import mmf_setup;mmf_setup.nbinit()"}
{"cell_type":"code","execution_count":2,"metadata":{"collapsed":false,"trusted":false},"outputs":[{"name":"stdout","output_type":"stream","text":"Populating the interactive namespace from numpy and matplotlib\n"},{"data":{"image/png":"smc-blob::274c9afe-e17e-451a-b1a2-16ca12ac22e3","text/plain":"<matplotlib.figure.Figure at 0x7f1236a6e950>"},"metadata":{},"output_type":"display_data"}],"source":"%pylab inline --no-import-all\nfrom IPython.display import display, clear_output\nimport bec; reload(bec)\nfrom bec import State, u\ns = State(Nxyz=(128,), Lxyz=(40*u.micron,), N=1e5)\ns.plot()"}
{"cell_type":"markdown","metadata":{},"source":"## Testing"}
{"cell_type":"markdown","metadata":{},"source":"To test the code, we will set $g=0$ and use the exact solution for the Harmonic Oscillator:\n\n$$\n  \\psi(x) \\propto e^{-(x/a)^2/2}, \\qquad\n  a^2 = \\frac{\\hbar}{m\\omega}\n$$"}
{"cell_type":"code","execution_count":98,"metadata":{"collapsed":false,"trusted":false},"outputs":[{"data":{"text/plain":"[<matplotlib.lines.Line2D at 0x7efbda22b050>]"},"execution_count":98,"metadata":{},"output_type":"execute_result"},{"data":{"image/png":"smc-blob::c31f94c0-a755-44a6-b49a-626da79e2a5d","text/plain":"<matplotlib.figure.Figure at 0x7efbda22b0d0>"},"metadata":{},"output_type":"display_data"}],"source":"def get_err(N=128, L=24*u.micron):\n    s = State(Nxyz=(N,), Lxyz=(L,), N=1e5)\n    s.g = 0\n    a = np.sqrt(u.hbar/u.m/s.ws[0])\n    x = s.xyz[0]\n    psi_0 = np.exp(-(x/a)**2/2.0)\n    s[...] = psi_0\n    s.normalize()\n    dy = s.empty()\n    s.compute_dy_dt(dy=dy, subtract_mu=True)\n    return abs(dy[...]).max()\n\nNs = 2**np.arange(2,8)\nerrs = map(get_err, Ns)\nplt.semilogy(Ns, errs, '-+')"}
{"cell_type":"markdown","metadata":{},"source":"Why are $L=23$microns and $N=2^6$ optimal?"}
{"cell_type":"code","execution_count":101,"metadata":{"collapsed":false,"trusted":false},"outputs":[{"name":"stdout","output_type":"stream","text":"(2.12353149896+0j)\n6.0100033373 6.0100033373\n9.87009441159e-15\n"}],"source":"s = State(Nxyz=(46,), Lxyz=(23*u.micron,))\na = np.sqrt(u.hbar/u.m/s.ws[0])\nL, N = s.Lxyz[0], s.Nxyz[0]\nk_max = np.pi*(N-2)/L   # For Khalid...\nprint k_max, s.kxyz[0].max()\nprint np.exp(-(L/2/a)**2/2)   # Wavefunction drops by factor of macheps"}
{"cell_type":"code","execution_count":97,"metadata":{"collapsed":false,"trusted":false},"outputs":[{"data":{"text/plain":"[<matplotlib.lines.Line2D at 0x7efbda1a1f10>]"},"execution_count":97,"metadata":{},"output_type":"execute_result"},{"data":{"image/png":"smc-blob::5ea63601-382b-4fd4-9181-831fc8a0895a","text/plain":"<matplotlib.figure.Figure at 0x7efbda40c8d0>"},"metadata":{},"output_type":"display_data"}],"source":"psi_0 = s.xyz[0]*np.exp(-(s.xyz[0]/a)**2/2)\nplt.semilogy(np.fft.fftshift(s.kxyz[0]), \n         np.fft.fftshift(abs(np.fft.fft(psi_0))), '-+')"}
{"cell_type":"markdown","metadata":{},"source":"So we see that for the ground state $k$ needs to go up to $6$."}
{"cell_type":"markdown","metadata":{},"source":"## Exact Solution with Interactions"}
{"cell_type":"code","execution_count":2,"metadata":{"collapsed":false,"trusted":false},"outputs":[{"name":"stdout","output_type":"stream","text":"Populating the interactive namespace from numpy and matplotlib\n"},{"data":{"text/plain":"1.2001072726244708e-14"},"execution_count":2,"metadata":{},"output_type":"execute_result"},{"data":{"image/png":"smc-blob::a7137e29-f8ef-4126-a837-33f23db1bf7f","text/plain":"<matplotlib.figure.Figure at 0x7f1bb07f8b10>"},"metadata":{},"output_type":"display_data"}],"source":"%pylab inline --no-import-all\nfrom IPython.display import display, clear_output\nimport bec; reload(bec)\nfrom bec import State, u\n\ns = State(Nxyz=(64,), Lxyz=(23*u.micron,), N=1e5)\na = np.sqrt(u.hbar/u.m/s.ws[0])\nx = s.xyz[0]\npsi_0 = np.exp(-(x/a)**2/2)\n\nclass State1(State):\n    def __init__(self, *v, **kw):\n        State.__init__(self, *v, **kw)\n        a = np.sqrt(u.hbar/u.m/self.ws[0])\n        x = self.xyz[0]\n        k = 1./2./a**2\n        psi_0 = 4.0*np.exp(-(x/a)**2/2)\n        n_0 = abs(psi_0)**2\n        self._V_ext = (u.hbar**2/2.0/u.m*(4*(k*x)**2 - 2*k) - self.g*n_0)\n        self.data[...] = psi_0\n        self.get_Vext = lambda: self._V_ext\n        self.pre_evolve_hook()\n        \ns = State1(Nxyz=(64,), Lxyz=(23*u.micron,))\ns.plot()\nplt.plot(x, s.get_Vext())\ndy = s.empty()\ns.compute_dy_dt(dy=dy, subtract_mu=False)\nabs(dy[...]).max()"}
{"cell_type":"code","execution_count":12,"metadata":{"collapsed":false,"trusted":false},"outputs":[{"data":{"image/png":"smc-blob::aba79bd9-5185-4314-af28-e46d83b75165","text/plain":"<matplotlib.figure.Figure at 0x7f1bd1495a50>"},"metadata":{},"output_type":"display_data"}],"source":"from mmfutils.contexts import NoInterrupt\nfrom pytimeode.evolvers import EvolverSplit, EvolverABM\nfrom IPython.display import display, clear_output\n\ns = State1(Nxyz=(64*4,), Lxyz=(23*u.micron,))\nassert np.allclose(s._N, s.get_N())\n\ns[...] = 1.0\ns.normalize()\ns.cooling_phase = 1j\n\nE_max = u.hbar**2*np.abs(s.kxyz).max()**2/2.0/u.m\n\n#e = EvolverSplit(s, dt=0.01*u.hbar/E_max, normalize=True)\ne = EvolverABM(s, dt=0.1*u.hbar/E_max, normalize=True)\n\nwith NoInterrupt(ignore=True) as interrupted:\n    while e.y.t < 4*u.ms and not interrupted:\n        e.evolve(100)\n        plt.clf()\n        e.y.plot()\n        display(plt.gcf())\n        clear_output(wait=True)"}
{"cell_type":"code","execution_count":21,"metadata":{"collapsed":false,"trusted":false},"outputs":[{"data":{"image/png":"smc-blob::b3d2a2f1-f02a-448d-bc52-4e1b76b540c1","text/plain":"<matplotlib.figure.Figure at 0x7f1baa97dc50>"},"metadata":{},"output_type":"display_data"}],"source":"from mmfutils.contexts import NoInterrupt\nfrom pytimeode.evolvers import EvolverSplit, EvolverABM\nfrom IPython.display import display, clear_output\n\ns = State1(Nxyz=(64*4,), Lxyz=(23*u.micron,))\ns *= np.sign(s.xyz[0] - 0.5)\ns.cooling_phase = 1 + 0.01j\n\nE_max = u.hbar**2*np.abs(s.kxyz).max()**2/2.0/u.m\n#e = EvolverSplit(s, dt=0.01*u.hbar/E_max, normalize=True)\ne = EvolverABM(s, dt=0.5*u.hbar/E_max, normalize=True)\n\nwith NoInterrupt(ignore=True) as interrupted:\n    while e.y.t < 40*u.ms and not interrupted:\n        e.evolve(100)\n        plt.clf()\n        e.y.plot()\n        display(plt.gcf())\n        clear_output(wait=True)"}
{"cell_type":"code","execution_count":null,"metadata":{"collapsed":false,"trusted":false},"outputs":[],"source":"%pylab inline --no-import-all\nfrom IPython.display import display, clear_output"}
{"cell_type":"code","execution_count":50,"metadata":{"collapsed":false,"trusted":false},"outputs":[{"data":{"image/png":"smc-blob::e252fb62-6c81-4da6-a8e9-10a08faa55ab","text/plain":"<matplotlib.figure.Figure at 0x11aa5ac50>"},"metadata":{},"output_type":"display_data"}],"source":"import bec;reload(bec)\nfrom pytimeode.evolvers import EvolverABM\nfrom mmfutils.contexts import NoInterrupt\nfrom bec import State, u\n\ns = State()\ns.cooling_phase = 1j\ns.t = -100*u.ms\ne = EvolverABM(s, dt=0.001)\nwith NoInterrupt(ignore=True) as interrupted:\n    while not interrupted:\n        e.evolve(500)\n        plt.clf()\n        e.y.plot()\n        display(plt.gcf())\n        clear_output(wait=True)\n        "}
{"cell_type":"code","execution_count":38,"metadata":{"collapsed":false,"trusted":false},"outputs":[{"data":{"text/plain":"(0.06546290960430827, (0.069329852780939283+0j))"},"execution_count":38,"metadata":{},"output_type":"execute_result"},{"data":{"image/png":"smc-blob::c09b3257-1dc8-4a0a-9b71-66b54c7ff024","text/plain":"<matplotlib.figure.Figure at 0x119a140d0>"},"metadata":{},"output_type":"display_data"}],"source":"s = e.get_y()\nn = s.get_density()\nx, y, z = s.xyz\nplt.plot(x.ravel(), n.sum(axis=-1).sum(axis=-1))\ns.mu, s._mu"}
{"cell_type":"code","execution_count":null,"metadata":{"collapsed":true,"trusted":false},"outputs":[],"source":""}