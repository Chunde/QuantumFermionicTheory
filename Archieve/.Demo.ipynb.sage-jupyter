{"kernelspec":{"display_name":"Python 2 (Ubuntu, plain)","language":"python","name":"python2-ubuntu"},"language_info":{"codemirror_mode":{"name":"ipython","version":2},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython2","version":"2.7.10"}}
{"cell_type":"code","execution_count":2,"metadata":{"collapsed":false,"trusted":true},"outputs":[{"data":{"text/html":"smc-blob::e524812a-4391-4403-b041-fdda9c2dd3b6","text/plain":"<IPython.core.display.HTML object>"},"metadata":{},"output_type":"display_data"},{"data":{"application/javascript":"smc-blob::af3dc0c4-87ab-4e89-bdf8-f221d33e1dda","text/plain":"<IPython.core.display.Javascript object>"},"metadata":{},"output_type":"display_data"},{"data":{"text/html":"smc-blob::540c5d05-cc63-4445-a155-e438df6294f7","text/plain":"<IPython.core.display.HTML object>"},"metadata":{},"output_type":"display_data"}],"source":"import mmf_setup;mmf_setup.nbinit()"}
{"cell_type":"code","execution_count":3,"metadata":{"collapsed":false,"trusted":true},"outputs":[{"data":{"text/plain":"smc-blob::05d7fc4e-110c-467f-af95-b2c669dfb347"},"execution_count":3,"metadata":{},"output_type":"execute_result"}],"source":"from pytimeode.interfaces import implements, IStateForABMEvolvers, ArrayStateMixin\nfrom pytimeode.evolvers import EvolverABM\n\nimport numpy as np\n\nclass State(ArrayStateMixin):\n    implements(IStateForABMEvolvers)\n\n    def __init__(self, shape):\n        # ArrayStateMixin requires you to define self.data\n        self.data = np.zeros(shape)\n\n    def compute_dy(self, dy):\n        \"\"\"Set `dy[...]` to contain f(y, t) where dy/dt = f(y,t)\"\"\"\n        dy[...] = -self[...]**2\n        return dy\n\nstate = State([2])\nstate[...] = [1, 2]  # Set the initial state\n\nevolver = EvolverABM(state, dt=0.01, t=0.0)\nts = [evolver.y.t]\nstates = [evolver.get_y()]  # Use get_y() to get a copy of the state\n\nfor n in xrange(10):\n    evolver.evolve(100)\n    states.append(evolver.get_y())\n\nstates\n#%pylab notebook --no-import-all\n#plt.plot(ts, res)"}
{"cell_type":"code","execution_count":41,"metadata":{"collapsed":false,"trusted":true},"outputs":[],"source":"s=State([2])\ny0 = np.array([1.0,2.])\nt = 1.0\ny1 = 1./(t + 1./y0)\n\ndef f(N=100):\n    s[...] = y0\n    s.t=0.0\n    e=EvolverABM(s, dt=t/N)\n    e.evolve(N)\n    assert np.allclose(e.t,t)\n    return e.y[...] - y1\n\nNs = 2**np.arange(2,12)\nerrs = [abs(f(_N)).max() for _N in Ns]\n"}
{"cell_type":"code","execution_count":43,"metadata":{"collapsed":false,"trusted":true},"outputs":[{"name":"stdout","output_type":"stream","text":"Populating the interactive namespace from numpy and matplotlib\n"},{"data":{"text/plain":"[<matplotlib.lines.Line2D at 0x7fd964818c10>]"},"execution_count":43,"metadata":{},"output_type":"execute_result"},{"data":{"text/plain":"<matplotlib.figure.Figure at 0x7fd96492fcd0>"},"metadata":{},"output_type":"display_data"}],"source":"%pylab inline --no-import-all\nplt.loglog(Ns,errs, '-+')\nplt.loglog(Ns, errs[0]*(float(Ns[0])/Ns)**5)"}
{"cell_type":"code","execution_count":null,"metadata":{"collapsed":true,"trusted":true},"outputs":[],"source":""}